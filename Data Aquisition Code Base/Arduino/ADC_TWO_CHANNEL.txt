#include    <avr/io.h>
#include    <stdlib.h>
#include    <avr/interrupt.h>
#include    <util/delay.h>
#include    "AtMega328P_UART.h"
#include    <string.h>
// Define Constants for USART
//
#define BAUD 76800
#define MYUBRR F_OSC/16/BAUD-1
#define CH0 0
#define CH1 1
#define CH2 2
#define CH3 3
#define NUM_INPUT 2

int main (void)
{
    // *** Configure the UART (for testing) ***
    //
    USART328P_Init(MYUBRR);

    // *** Configure the ADC ***
    //

    // Enable a prescaler (determined by 16MHz clock)
    //
    ADCSRA |= 7 << ADPS0; // 125kHz

    // Turn on the ADC
    //
    ADCSRA |= 1 << ADEN;

    // Enable Global Interrupts
    //
    sei();

    // configure reference voltage for ADC (internal reference)
    //
    ADMUX |= 1 << REFS0;

    // Enable interrupts in ADC
    //
    ADCSRA |= 1 << ADIE;

    // Start the first conversion
    //
    _delay_ms(5000);
    ADCSRA |= 1 << ADSC;

    while(1)
    {
    }

    return 0;
}

// define the interrupt service routine
//

ISR(ADC_vect)
{
	static int flag = 0;
	// String Variable holding the conversion
	//
	static char MUXMASK = 0x01;
	static char FourChannelRes[NUM_INPUT + 1];
	static char tempRes[NUM_INPUT + 1];
	static int channel = CH1;
	int clearReg = NULL;
	// Start current conversion
	//
	ADMUX ^= MUXMASK;
	clearReg = ADC;
	ADCSRA |= 1 << ADSC; // takes 13 clock cycles (125 kHz clock)
	//clearReg = ADCH;

	// Only read every other sample on each channel to allow time for transmission
	//
	if (flag == 2)
	{
		switch (channel) // marks the input currently being sampled
		       {	 /*
					case CH0:
							// Storing Channel 3 Results
							   	   	   //
												tempRes[3] = ADCL;
														tempRes[4] |= (ADCH << 6);
															      	    // store the temp result in the permanent result for transmission
																       	     	 //
																		    memcpy(FourChannelRes, tempRes, 5);
																		    			   	     channel = CH1;
																						     	        // Set the ADC back to Analog Input 0
																								       	   //
																									      //ADMUX &= ~(3);
																									      	      	  // Transmit the Result
																											     	      	  //
																													     //flag = 0;
																													     	       USART328P_Transmit(FourChannelRes, 5);

																														       					    break;
																																			      */
																																			        case CH1:
																																				       // Storing Channel 0 Results
																																				       	  	  	  //
																																							     tempRes[0] = ADCL;
																																							     		   tempRes[2] = ADCH;
																																									   	      	 channel = CH2;
																																											 	    MUXMASK = 0x01;
																																												    	       break;

																																													         case CH2:
																																														        // Storing Channel 1 Results
																																															   	   	   //
																																																	      tempRes[1] = ADCL;
																																																	      		    tempRes[2] |= (ADCH << 2) ;
																																																			    	       	  	channel = CH1;
																																																							   MUXMASK = 0x01;
																																																							   	      flag = 0;

																																																								      	      memcpy(FourChannelRes, tempRes, 3);
																																																									      			     	       USART328P_Transmit(FourChannelRes, 3);
																																																													       					    break;
																																																																		      /*
																																																																		        case CH3:
																																																																			       //Storing Channel 2 Results
																																																																			       		 	   //
																																																																						      tempRes[2] = ADCL;
																																																																						      		    tempRes[4] |= (ADCH << 4);
																																																																								    	       	  	channel = CH0;
																																																																												   // Set the ADC to next Analog Input
																																																																												      	      //
																																																																													         //ADMUX++;
																																																																														    break;
																																																																														      */
																																																																														       } // end case statement
																																																																														       } // end if statement
																																																																														       else flag++;


}


